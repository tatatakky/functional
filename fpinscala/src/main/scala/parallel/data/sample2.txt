In computer science, functional programming is a programming paradigm
a style of building the structure and elements of computer programsâ€”that treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data
that treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data.
It is a declarative programming paradigm in that programming is done with expressions or declarations instead of statements.
Functional code is idempotent: a function's return value depends only on its arguments, so calling a function with the same value for an argument always produces the same result.
This is in contrast to imperative programming where, in addition to a function's arguments, global program state can affect a function's resulting value.
Eliminating side effects, that is, changes in state that do not depend on the function inputs, can make understanding a program easier, which is one of the key motivations for the development of functional programming.
Functional programming has its origins in lambda calculus, a formal system developed in the 1930s to investigate computability, the Entscheidungsproblem, function definition, function application, and recursion. Many functional programming languages can be viewed as elaborations on the lambda calculus.
Another well-known declarative programming paradigm, logic programming, is based on relations.
In contrast, imperative programming changes state with statements in the source code, the simplest example being assignment.
Imperative programming has subroutines, but these are not mathematical functions.
They can have side effects that may change a program's state, allowing for functions without return values.
Because of this, they lack referential transparency, that is, the same language expression can result in different values at different times depending on the state of the executing program.
Functional programming languages have largely been emphasized in academia rather than industry settings.
However, programming languages that support functional programming have been used in industry, including Common Lisp, Scheme, Clojure, Wolfram Language, Racket, Erlang, OCaml, Haskell, and F#.
JavaScript, one of the world's most widely distributed languages, has the properties of a dynamically typed functional language, in addition to imperative and object-oriented paradigms.
Functional programming is also key to some languages that have found success in specific domains, like R in statistics, J, K and Q in financial analysis, and XQuery/XSLT for XML.
Domain-specific declarative languages like SQL and Lex/Yacc use some elements of functional programming, especially in not supporting mutable values.